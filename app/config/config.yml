imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

# Framework Configuration
framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    trusted_proxies: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    templating:
            engines: ['twig'] # evite cette erreure The service "sonata.block.service.container" has a dependency on a non-existent service "templating".
            form:
                resources:
                    - 'bootstrap_3_horizontal_layout.html.twig'
                    - 'SonataCoreBundle:Form:datepicker.html.twig'
                    - 'SonataCoreBundle:Form:colorpicker.html.twig'
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    globals:
        admin_skin: "%admin_skin%"
        locale: '%locale%'

    form_themes:
        - ':Form:fields.html.twig'
    date:
        format: d/m/Y
        interval_format: '%%a jours'
        timezone: Europe/Paris
    number_format:
        decimals: 2
        decimal_point: '.'
        thousands_separator: ' '

# Assetic configuration
assetic:
    debug:          '%kernel.debug%'
    use_controller: false # '%kernel.debug%'
    filters:
        cssrewrite: ~

# FOS User configuration
fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User
    model_manager_name: default # the name of your entity manager
    from_email:
        address: "%mailer_user%"
        sender_name: "%mailer_user%"
#    registration:
#        form:
#            type: AppBundle\Form\RegistrationType
    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

    service:
        user_manager: sonata.user.orm.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

# FOS JS Routing Configuration
fos_js_routing:
     routes_to_expose: [ (.*) ]

# Doctrine Configuration
doctrine:
    dbal:
        types:
            json: Sonata\Doctrine\Types\JsonType
        default_connection: default
        connections:
            default:
                driver: '%database_driver%'
                host: '%database_host%'
                port: '%database_port%'
                dbname: '%database_name%'
                user: '%database_user%'
                password: '%database_password%'
                charset: UTF8
                # if using pdo_sqlite as your database driver:
                #   1. add the path in parameters.yml
                #     e.g. database_path: '%kernel.project_dir%/var/data/data.sqlite'
                #   2. Uncomment database_path in parameters.yml.dist
                #   3. Uncomment next line:
                #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        default_entity_manager: default
        entity_managers:
            default:
                naming_strategy: doctrine.orm.naming_strategy.underscore
                auto_mapping: true
                connection: default
                mappings:
                    ApplicationSonataUserBundle: ~
                    SonataUserBundle: ~
                    FOSUserBundle: ~
                    gedmo_translatable:
                        type: annotation
                        prefix: Gedmo\Translatable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity"
                        alias: GedmoTranslatable # (optional) it will default to the name set for the mapping
                        is_bundle: false
                    gedmo_translator:
                        type: annotation
                        prefix: Gedmo\Translator\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translator/Entity"
                        alias: GedmoTranslator # (optional) it will default to the name set for the mapping
                        is_bundle: false
                    gedmo_loggable:
                        type: annotation
                        prefix: Gedmo\Loggable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"
                        alias: GedmoLoggable # (optional) it will default to the name set for the mappingmapping
                        is_bundle: false
                    gedmo_tree:
                        type: annotation
                        prefix: Gedmo\Tree\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
                        alias: GedmoTree # (optional) it will default to the name set for the mapping
                        is_bundle: false
#                metadata_cache_driver: apc
#                query_cache_driver: apc
#                result_cache_driver: apc

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

# Nelmio API Doc Bundle Configuration
nelmio_api_doc:
        name:                 'API documentation'
        exclude_sections:     []
        default_sections_opened:  true
        motd:
            template:             'NelmioApiDocBundle::Components/motd.html.twig'
        request_listener:
            enabled:              true
            parameter:            _doc
#        sandbox:
#            enabled:              true
#            endpoint:             null
#            accept_type:          null
#            body_format:
#                formats:
#                    # Defaults:
#                    - form
#                    - json
#                default_format:       ~ # One of "form"; "json"
#            request_format:
#                formats:
#                    # Defaults:
#                    json:                application/json
#                    xml:                 application/xml
#                method:               ~ # One of "format_param"; "accept_header"
#                default_format:       json
#            authentication:
#                delivery:             ~ # Required
#                name:                 ~ # Required
#
#                # Required if http delivery is selected.
#                type:                 ~ # One of "basic"; "bearer"
#                custom_endpoint:      false
#            entity_to_choice:         true
        swagger:
            api_base_path:        /api
            swagger_version:      '1.2'
            api_version:          '0.1'
            info:
                title:                Symfony2
                description:          'My awesome Symfony2 app!'
                TermsOfServiceUrl:    null
                contact:              null
                license:              null
                licenseUrl:           null


# Stof\DoctrineExtensionsBundle configuration
stof_doctrine_extensions:
    orm:
        default:
            sluggable: true

# Sonata User Configuration
sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

# Sonata Block Configuration
sonata_block:
    default_contexts: [cms]
    blocks:

        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts:   [admin]
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes
        sonata.block.service.menu:

sonata_doctrine_orm_admin:
#    # default value is null, so doctrine uses the value defined in the configuration
#    entity_manager: '@doctrine.orm.default_entity_manager'

# Avanzu Admin Theme Configuration
avanzu_admin_theme:
    bower_bin: C:\Users\cthed\AppData\Roaming\npm\bower
#    uglifycss_bin: C:\Users\cthed\AppData\Roaming\npm\uglifycss
#    uglifyjs_bin: C:\Users\cthed\AppData\Roaming\npm\uglifyjs
#    use_assetic: false

# Nelmio Cors Configuration
nelmio_cors:
    paths:
        '^/api/':
            allow_origin: ['*']
#            allow_origin: ['http://localhost:4200']
            allow_headers: ['origin', 'content-type', 'authorization']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE']
            max_age: 3600

# Lexik Jwt Configuration
lexik_jwt_authentication:
    private_key_path: '%jwt_private_key_path%'
    public_key_path:  '%jwt_public_key_path%'
    pass_phrase:      '%jwt_key_pass_phrase%'
    token_ttl:        '%jwt_token_ttl%'
    # key under which the user identity will be stored in the token payload
    user_identity_field: username

    # token encoding/decoding settings
    encoder:
        # token encoder/decoder service - default implementation based on the namshi/jose library
        service:            lexik_jwt_authentication.encoder.default
        # crypto engine used by the encoder service
        crypto_engine:  openssl
        # encryption algorithm used by the encoder service
        signature_algorithm: RS256

    # token extraction settings
    token_extractors:
        authorization_header:      # look for a token as Authorization Header
            enabled: true
            prefix:  Bearer
            name:    Authorization
        cookie:                    # check token in a cookie
            enabled: false
            name:    BEARER
        query_parameter:           # check token in query string parameter
            enabled: false
            name:    bearer

# Sonata admin configuration
sonata_admin:
    title:                'Kickstart Admin'
    title_logo:           bundles/sonatauser/default_avatar.png
    templates:
        dashboard: SonataAdminBundle:Core:dashboard.html.twig

    dashboard:
        groups:
            # Users
            app.admin.group.users:
                roles:
                  - ROLE_ADMIN
                label:                Users
                icon:                 '<i class="fa fa-users"></i>'
                items: